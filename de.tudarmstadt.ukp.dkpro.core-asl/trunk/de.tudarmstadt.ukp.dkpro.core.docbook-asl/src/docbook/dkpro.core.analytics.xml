<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
<!ENTITY imgroot "images/dkpro.core.analytics/" >
]>
<!--
	Copyright 2013
	Ubiquitous Knowledge Processing (UKP) Lab
	Technische UniversitÃ¤t Darmstadt
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<chapter id="ugr.dkpro.core.analytics">
  <title>Analysis Components</title>
	<para>This section provides an overview of the analysis componens that can be deployed at the
		different levels of analysis.</para>
	<para/>
	<section>
		<title>Coreference Resolution</title>
		<para/>
		<figure>
			<title>Coreference types</title>
			<mediaobject>
				<imageobject>
					<imagedata width="45%" fileref="&imgroot;coreference.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<table frame="all">
			<title>Coreference components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>StanfordCoreferenceResolver</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Chunking</title>
		<para/>
		<table frame="all">
			<title>Chunking components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>OpenNlpChunker</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>TreeTaggerChunker</para>
						</entry>
						<entry>
							<para>(uses native binary)</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Decompounding</title>
		<para/>
		<table frame="all">
			<title>Decompounding components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>CompoundAnnotator</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Dictionary-Based Annotation</title>
		<para/>
		<table frame="all">
			<title>Dictionary-based annotation components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>DictionaryAnnotator</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>SemanticFieldAnnotator</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Language Identification</title>
		<para/>
		<figure>
			<title>DocumentAnnotation type</title>
			<mediaobject>
				<imageobject>
					<imagedata width="20%" fileref="&imgroot;language_identification.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<table frame="all">
			<title>Language identification components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>LangDetectLanguageIdentifier</para>
						</entry>
						<entry>
							<para>Character n-grams</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>LanguageDetectorWeb1T</para>
						</entry>
						<entry>
							<para>Token n-grams</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>TextCat</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Lemmatization</title>
		<para/>
		<figure>
			<title>Lemma type</title>
			<mediaobject>
				<imageobject>
					<imagedata width="45%" fileref="&imgroot;lemmatization.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<table frame="all">
			<title>Lemmatization components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>ClearNlpLemmatizer</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>GateLemmatizer</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>LanguageToolLemmatizer</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>MateLemmatizer</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>MorphaLemmatizer</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>StanfordLemmatizer</para>
						</entry>
						<entry>
							<para>(variant of Morpha)</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>TreeTaggerPosTagger</para>
						</entry>
						<entry>
							<para>(uses native binary)</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Morphological Analysis</title>
		<para/>
		<table frame="all">
			<title>Morphological analysis components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>MateMorphTagger</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>SfstAnnotator</para>
						</entry>
						<entry>(uses native binary)</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Named-Entity Recognition</title>
		<para/>
		<table frame="all">
			<title>Named-entity recognition components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>OpenNlpNameFinder</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>StanfordNamedEntityRecognizer</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Parsing</title>
		<para/>
		<table frame="all">
			<title>Parsing components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>BerkeleyParser</para>
						</entry>
						<entry>
							<para>constituents</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>ClearNlpDependencyParser</para>
						</entry>
						<entry>
							<para>dependencies</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>OpenNlpParser</para>
						</entry>
						<entry>
							<para>constituents</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>MaltParser</para>
						</entry>
						<entry>
							<para>dependencies</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>MateParser</para>
						</entry>
						<entry>
							<para>dependencies</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>MstParser</para>
						</entry>
						<entry>
							<para>dependencies</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>StanfordParser</para>
						</entry>
						<entry>
							<para>constituents, dependencies (for some languages)</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Part-of-Speech Tagging</title>
		<para/>
		<figure>
			<title>Part-of-speech type</title>
			<mediaobject>
				<imageobject>
					<imagedata width="45%" fileref="&imgroot;part-of-speech.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<table frame="all">
			<title>Part-of-speech tagging components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>ArktweetTagger</para>
						</entry>
						<entry>
							<para>(not in release)</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>ClearNlpPosTagger</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>HepplePosTagger</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>HunPosTagger</para>
						</entry>
						<entry>
							<para>(uses native binary)</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>MatePosTagger</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>MeCabTagger</para>
						</entry>
						<entry>
							<para>(uses native binary)</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>OpenNlpPosTagger</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>StanfordPosTagger</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>TreeTaggerPosTagger</para>
						</entry>
						<entry>
							<para>also does lemmatization (uses native binary)</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Segmentation</title>
		<para>Segmenter components identify sentence boundaries and tokens. The order in which sentence
			splitting and tokenization are done differs between the integrated the NLP libraries.
			Thus, we chose to integrate both steps into a segmenter component to avoid the need to
			reorder the components in a pipeline when replacing one segmenter with another.</para>
		<figure>
			<title>Segmentation types</title>
			<mediaobject>
				<imageobject>
					<imagedata width="30%" fileref="&imgroot;segmentation.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<table frame="all">
			<title>Segmentation components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>BreakIteratorSegmenter</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>ClearNlpSegmenter</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>LanguageToolSegmenter</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>OpenNlpSegmenter</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>StanfordSegmenter</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Semantic Role Labelling</title>
		<para/>
		<table frame="all">
			<title>Semantic role labelling components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>ClearNlpSemanticRoleLabeler</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Spell Checking</title>
		<para/>
		<table frame="all">
			<title>Spell checking components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>LanguageToolChecker</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>NorvigSpellingCorrector</para>
						</entry>
						<entry/>
					</row>
					<row>
						<entry>
							<para>JazzyChecker</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Stemming</title>
		<para/>
		<figure>
			<title>Stem type</title>
			<mediaobject>
				<imageobject>
					<imagedata width="45%" fileref="&imgroot;stemming.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<table frame="all">
			<title>Stemming components</title>
			<tgroup cols="2">
				<colspec colname="c1" colnum="1" colwidth="1.0*"/>
				<colspec colname="newCol2" colnum="2" colwidth="1*"/>
				<thead>
					<row>
						<entry>Component</entry>
						<entry>Comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>SnowballStemmer</para>
						</entry>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>Choosing components</title>
		<para>Sometimes we get asked which parser, tagger, etc. is the best and which should be
			used. We currently do not make any evaluations of the integrated tools. Also, building a
			pipeline just of the "best" components may not actually yield the best results, because
			of several reasons:</para>
		<itemizedlist>
			<listitem>
				<para>components or models may expect different tokenizations or tagsets</para>
			</listitem>
			<listitem>
				<para>components or models may be good for one domain (e.g. news) but not for
					another (e.g. twitter data)</para>
			</listitem>
		</itemizedlist>
		<para>We recommend that you try various combinations and stick with the one that gives the
			best result for <emphasis>your</emphasis> data.</para>
		<section>
			<title>Compatibility of Components</title>
			<para>When selecting components for your pipeline you should make sure that the
				components are compatible regarding the annotation types they expect or
				offer.</para>
			<itemizedlist>
				<listitem>
					<para>if a component expects an annotation type that is not provided by the
						preceding component, that may lead to an error or simply to no
						results</para>
				</listitem>
				<listitem>
					<para>if a component (e.g. a reader which adds sentence annotations) provides an
						annotation that is added again by a subsequent component (e.g. a segmenter),
						that will result in undefined behaviour of other components when you iterate
						over the annotation that has been added more than once.</para>
				</listitem>
			</itemizedlist>
			<para>To check whether components are compatible, you can look at the
					<literal>@TypeCapability</literal> annotation which is available in most DKPro
				Core components. Mind that many components can be configured with regards to which
				types they consume or produce, so the <literal>@TypeCapability</literal> should be
				taken as a rough indicator, not as a definitive information. It is also important to
				note, that the <literal>@TypeCapability</literal> does say anything about the tagset
				being consumed or produced by a component. E.g. one if a POS-tagger uses a model
				that produces POS-tags from the tagset X and a dependency-parser uses a model that
				requires POS-tags from the tagset Y, then the two models are not semantically
				compatible - even though the POS-tagger and dependency-parser components are
				compatible on the level of the type system.</para>
		</section>
		<section>
			<title>Particular Settings</title>
			<section>
				<title>Dictionaries and other lexical resources</title>
				<para>If you use components in your pipeline that access dictionaries or other
					lexical resources, it might be essential to include a Lemmatizer in your
					pipeline: Many dictionaries and well-known lexical resources such as WordNet
					require at minimum a lemma form as a search word in order to return information
					about that word. For large-scale lexical resources, e.g. for Wiktionary,
					additional information about POS is very helpful in order to reduce the
					ambiguity of a given lemma form.</para>
			</section>
			<section>
				<title>Lemmatizing multiwords </title>
				<para>If you use lemma information in your pipeline, you should bear in mind that
					multiword expressions, in particular discontinuous multiwords, might not be
					lemmatized as one word (or expression), but rather each multiword part might be
					lemmatized separately. In languages such as German, there are verbs with
					separable particle such as _anfangen_ (_an_ occurs separate from _fangen_ in
					particular sentence constructions). Therefore - depending on your use case - you
					might consider postprocessing the output of the lemmatizer in order to get the
					true lemmas (which you might need, e.g. in order to look up information in a
					lexical resource).</para>
			</section>
			<section>
				<title>Morphologically Rich Languages</title>
				<itemizedlist>
					<listitem>
						<para>Parsing: Morphologically rich languages (e.g. Czech, German, and
							Hungarian) pose a particular challenge to parser components (Tsarfaty et
							al. 2013).</para>
					</listitem>
					<listitem>
						<para>Morphological analysis: for languages with case syncretism (displaying
							forms that are ambiguous regarding their case, e.g. _Frauen_ in German
							can be nominative or genitive or dative or accusative), it might be
							better to leave case underspecified at the morphosyntactic level and
							leave disambiguation to the components at the syntactic level. Otherwise
							errors might be introduced that will then be propagated to the next
							pipeline component (Seeker and Kuhn 2013).</para>
					</listitem>
				</itemizedlist>
			</section>
			<section>
				<title>Domain-specific and other non-standard data</title>
				<para>Most components (sentence splitters, POS taggers, parsers ...) are trained on
					(standard) newspaper text. As a consequence, you might encounter a significant
					performance drop if you apply the components to domain specific or other
					non-standard data without adaptation.</para>
				<itemizedlist>
					<listitem>
						<para>Tokenizing: adapting the tokenizer to your specific domain is crucial,
							since tokenizer errors propagate to all subsequent components in the
							pipeline and worsen their performance. For example, you might adapt your
							tokenizer to become aware of emoticons or chemical formulae in order to
							process social media data or text from the biochemical domain.</para>
					</listitem>
				</itemizedlist>
			</section>
			<section>
				<title>Shallow processing and POS tagsets</title>
				<para>While more advanced semantic processing (e.g. discourse analysis) typically
					depends on the output of a parser component, there might be settings where you
					prefer to perform shallow processing (i.e. POS tagging and chunking).</para>
				<para>For shallow processing, it might be necessary to become familiar with the
					original POS tagsets of the POS taggers rather than relying on the uniform, but
					coarse-grained DKPro Core POS tags (because the original fine-grained POS tags
					carry more information).</para>
				<para>Although many POS taggers in a given language are trained on the same POS
					tagset (e.g. the Penn TreeBank Tagset for English, the STTS Tagset for German),
					the individual POS Taggers might output variants of this tagset. You should be
					aware of the fact that in the DKPro Core version of the tagger, the original POS
					tagger output possibly has been mapped to a version that is compatible with the
					corresponding original tagset. (Example)</para>
			</section>
		</section>
		<section>
			<title>Further references</title>
			<para>Here are some further references that might be helpful when deciding which tools
				to use:</para>
			<itemizedlist>
				<listitem>
					<para>Giesbrecht, Eugenie and Evert, Stefan (2009). Part-of-speech tagging - a
						solved task? An evaluation of POS taggers for the Web as corpus. In I.
						Alegria, I. Leturia, and S. Sharoff, editors, Proceedings of the 5th Web as
						Corpus Workshop (WAC5), San Sebastian, Spain. <ulink
							url="http://purl.org/stefan.evert/PUB/GiesbrechtEvert2009_Tagging.pdf"
							>PDF</ulink></para>
				</listitem>
				<listitem>
					<para>Reut Tsarfaty, DjamÃ© Seddah, Sandra KÃ¼bler, and Joakim Nivre. 2013.
						Parsing morphologically rich languages: Introduction to the special issue.
						Comput. Linguist. 39, 1 (March 2013), 15-22. <ulink
							url="https://aclweb.org/anthology/J/J13/J13-1003.pdf">PDF</ulink></para>
				</listitem>
				<listitem>
					<para>Wolfgang Seeker and Jonas Kuhn. 2013. Morphological and syntactic case in
						statistical dependency parsing. Comput. Linguist. 39, 1 (March 2013), 23-55.
							<ulink url="http://aclweb.org/anthology//J/J13/J13-1004.pdf"
						>PDF</ulink>Using </para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	<section>
		<title>Adding components as dependencies (Maven)</title>
		<para>As an example, we take the OpenNlpPosTagger component. To make it available in a
			pipeline, we add the following dependency to our POM file:</para>
		<programlisting>&lt;properties>
  &lt;dkpro.core.version><?eval ${project.version}?>&lt;/dkpro.core.version>
&lt;/properties>
&lt;dependencies>
  &lt;dependency>
    &lt;groupId>de.tudarmstadt.ukp.dkpro.core&lt;/groupId>
    &lt;artifactId>de.tudarmstadt.ukp.dkpro.core.opennlp-asl&lt;/artifactId>
  &lt;/dependency>
&lt;/dependencies>
&lt;dependencyManagement>
  &lt;dependencies>
    &lt;dependency>
      &lt;groupId>de.tudarmstadt.ukp.dkpro.core&lt;/groupId>
      &lt;artifactId>de.tudarmstadt.ukp.dkpro.core-asl&lt;/artifactId>
      &lt;version>${dkpro.core.version}&lt;/version>
      &lt;type>pom&lt;/type>
      &lt;scope>import&lt;/scope>
    &lt;/dependency>
  &lt;/dependencies>
&lt;/dependencyManagement></programlisting>
		<para>The dependency on DKPro Core declared in the dependency management section fixes the
			version of all DKPro Core dependencies that are added to the POM. Hence, it is not
			necessary to declare the version for each dependency. When upgrading to a new DKPro Core
			version, it is sufficient to change the value of the
				<literal>dkpro.core.version</literal> property in the properties section.</para>
	</section>
	<section>
		<title>Adding resources as dependencies (Maven)</title>
		<para>Most components require resources such as models in order to operate. Since components
			and resources are versioned separately, it can be non-trivial to find the right version
			of a resource for a particular version of a component. For this reason, DKPro Core
			components each maintain a list of resources known to be compatible with them. This
			information can be accessed in a Maven POM, thus avoiding the need to manually specify
			the version of the models. Consequently, when you upgrade to a new version of DKPro
			Core, all models are automatically upgraded as well. This is usually the desired
			solution, although it can mean that your pipelines may produce slightly different
			results.</para>
		<para>As an example, we take the OpenNlpPosTagger component. In the previous section, we
			have seen how to make it available in a pipeline. Now we also add the model for
			English.</para>
		<programlisting>&lt;dependencies>
  &lt;dependency>
    &lt;groupId>de.tudarmstadt.ukp.dkpro.core&lt;/groupId>
    &lt;artifactId>
      de.tudarmstadt.ukp.dkpro.core.opennlp-model-tagger-en-maxent
    &lt;/artifactId>
  &lt;/dependency>
&lt;/dependencies>
&lt;dependencyManagement>
  &lt;dependencies>
    &lt;dependency>
      &lt;groupId>de.tudarmstadt.ukp.dkpro.core&lt;/groupId>
      &lt;artifactId>de.tudarmstadt.ukp.dkpro.core.opennlp-asl&lt;/artifactId>
      &lt;version>${dkpro.core.version}&lt;/version>
      &lt;type>pom&lt;/type>
      &lt;scope>import&lt;/scope>
    &lt;/dependency>
  &lt;/dependencies>
&lt;/dependencyManagement></programlisting>
		<para>The dependency on the DKPro Core OpenNLP module declared in the dependency management
			section fixes the version of all known OpenNLP models. Thus, it is not necessary to
			declare a version on each model dependency. When upgrading to a new DKPro Core version,
			it is sufficient to change the value of the <literal>dkpro.core.version</literal>
			property in the properties section.</para>
	</section>
</chapter>
